@using System.Collections.ObjectModel
@using Microsoft.JSInterop
@using System.IO
@inject IJSRuntime JSRuntime
@inject DialogService dialogService


<RadzenDataGrid @ref="ordersGrid" RowRender="@RowRender" @bind-Value="selectedMacros" ColumnWidth="150px" AllowFiltering="true" AllowSorting="true" Data="@marcoList">
    <HeaderTemplate>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10">
            <RadzenFormField Text="巨集名稱" Variant="Variant.Outlined">
                <RadzenTextBox Style="width: 50%" Value="@Category.name" @oninput=NameChanged Disabled="isPlaying == true" />
            </RadzenFormField>
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Click="@InsertRow" Disabled="isPlaying == true" />
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="@GetButtonIcon()" Click="@handleClickPlay" Disabled="isPlaying == true" />
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Click="@handleClickStop" Disabled="isPlaying == false" />
            <RadzenFormField Text="重複次數" Variant="Variant.Outlined">
                <RadzenNumeric @bind-Value="@Category.repeat" Min="1" Disabled="isPlaying == true" />
            </RadzenFormField>
        </RadzenStack>
    </HeaderTemplate>
    
    <Columns>
            <RadzenDataGridColumn Property="@nameof(MacroModel.keyNumber)" Title="按鍵/行為" Sortable="false" Filterable="false" Width="180px">
                <Template Context="data">
                        @if (data.type == Types.button)
                        {
                            <RadzenDropDown @bind-Value="data.keyNumber"
                                            Disabled="isPlaying == true || (data.type == Types.mouse || data.type == Types.text)"
                                            AllowFiltering="true"
                                            TextProperty="@nameof(OptionModel.label)"
                                            ValueProperty="@nameof(OptionModel.value)"
                                            Data="KeyList"
                                            Style="width: 100%; max-width: 400px;" />
                        }
                        else if (data.type == Types.text)
                        {
                            <RadzenTextBox @bind-Value="data.inputText" Style="width: 100%" aria-label="Default TextBox" Disabled="isPlaying == true" />
                        }
                        else if (data.type == Types.mouse)
                        {
                            <RadzenButton Icon="imagesmode" Variant="Variant.Flat" Text="設定圖片"  Click="@(args => ShowImageDialog(data))" ButtonStyle="ButtonStyle.Base" />

                            @if (!string.IsNullOrEmpty(data.imagePath))
                            {
                                <RadzenImage Path="@data.imagePath" />
                            }
                        }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(MacroModel.type)" Title="類型">
                <Template Context="data">
                    <RadzenDropDown @bind-Value="data.typeNumber"
                                    AllowFiltering="true"
                                    Change="@((object value) => TypeChanged(data, value))"
                                    Disabled="isPlaying == true"
                                    TextProperty="@nameof(OptionModel.label)"
                                    ValueProperty="@nameof(OptionModel.value)"
                                    Data="TypeList"
                                    Style="width: 100%; max-width: 400px;" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(MacroModel.sleep)" Title="執行後暫停">
                <Template Context="data">
                    <RadzenNumeric ShowUpDown="false" TValue="int" Min="1" @bind-Value="data.sleep" Disabled="isPlaying == true" />
                </Template>
            </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="50px" Context="data" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="data">
                <RadzenButton Disabled="isPlaying == true" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(data))" @onclick:stopPropagation="true"></RadzenButton>
            </Template>
        </RadzenDataGridColumn>
        </Columns>
</RadzenDataGrid>


@code {

    private ObservableCollection<MacroModel>? marcoList;
    private MacroModel? draggedItem;
    private IList<MacroModel>? selectedMacros;
    private bool isPlaying = false;

    [Parameter]
    public CategoryModel? Category { get; set; }

    [Parameter]
    public List<OptionModel>? KeyList { get; set; }

    [Parameter]
    public List<OptionModel>? TypeList { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> NameChanged { get; set; }

    [Parameter]
    public EventCallback<CategoryModel> CallCancel { get; set; }

    [Parameter]
    public EventCallback<CategoryModel> CallPlay { get; set; }

    DataGridEditMode editMode = DataGridEditMode.Single;

    RadzenDataGrid<MacroModel> ordersGrid;

    private string? FilePath { get; set; }

    protected override void OnParametersSet()
    {
        if (Category != null)
        {
            marcoList = new ObservableCollection<MacroModel>(Category.macroList);

            selectedMacros = new List<MacroModel>() { marcoList.FirstOrDefault() };
        }
    }

    protected async Task InsertRow()
    {
        var marco = new MacroModel()
        {
            type = Types.button,
            typeNumber = (int)Types.button,
            key = Keys.D1,
            sleep = 3,
            keyNumber = (int)Keys.D1,
            inputText = "/echo 123"
        };

        this.marcoList?.Add(marco);
        await ordersGrid.Reload();
        this.Category.macroList = this.marcoList.ToList();
    }

    protected void TypeChanged(MacroModel macro, object value)
    {
        var controlType = (Types)value;
        macro.type = controlType;
    }

    protected async Task DeleteRow(MacroModel macro)
    {
        this.marcoList?.Remove(macro);
        await ordersGrid.Reload();
        this.Category.macroList = this.marcoList.ToList();
    }

    private string GetButtonIcon()
    {
        return isPlaying ? "hourglass_empty" : "play_arrow";
    }

    protected async Task handleClickPlay()
    {
        isPlaying = true;
        await CallPlay.InvokeAsync(this.Category);
        isPlaying = false;
    }

    protected async Task handleClickStop()
    {
        await CallCancel.InvokeAsync(this.Category);
        isPlaying = false;
    }

    private async Task ShowImageDialog(MacroModel model)
    {
        var result = await dialogService.OpenAsync("設定圖片", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenCard Variant="Variant.Outlined">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Drag and drop files to upload</RadzenText>
            <RadzenUpload ChooseText="Drag and drop here or click to choose files"
                          Change=@(args => OnImageChange(args, model))
                          InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
                          Style="width: 100%" />
            <RadzenButton Text="Confirm" Click="@(args => ConfirmImage(model))" class="rz-mt-4" />
        </RadzenCard>
    </RadzenStack>
    );
    }

    private async Task OnImageChange(UploadChangeEventArgs args, MacroModel model)
    {
        if (args.Files.Count() == 0)
        {
            FilePath = string.Empty;
            return;
        }

        foreach (var file in args.Files)
        {
            try
            {
                long maxFileSize = 10 * 1024 * 1024;
                var stream = file.OpenReadStream(maxFileSize);

                string uploadFolder = Path.Combine("wwwroot", "uploads");

                if (!Directory.Exists(uploadFolder))
                {
                    Directory.CreateDirectory(uploadFolder);
                }

                string fileName = Path.GetFileName(file.Name);
                string filePath = Path.Combine(uploadFolder, fileName);

                using (var fileStream = new FileStream(filePath, FileMode.Create))
                {
                    await stream.CopyToAsync(fileStream);
                }

                stream.Close();

                FilePath = filePath;
            }
            catch (Exception ex)
            {
                await dialogService.Alert(ex.Message, "Error", new AlertOptions() { OkButtonText = "OK" });
            }
        }
    }

    private void ConfirmImage(MacroModel model)
    {
        model.imagePath = FilePath ?? string.Empty;
        dialogService.Close();
    }

    private void RowRender(RowRenderEventArgs<MacroModel> args)
    {
        args.Attributes.Add("title", "Drag row to reorder");
        string styles = "cursor: grab;";
        args.Attributes.Add("style", styles);
        args.Attributes.Add("draggable", "true");
        args.Attributes.Add("ondragover", "event.preventDefault();event.target.closest('.rz-data-row').classList.add('my-class')");
        args.Attributes.Add("ondragleave", "event.target.closest('.rz-data-row').classList.remove('my-class')");
        args.Attributes.Add("ondragstart", EventCallback.Factory.Create<DragEventArgs>(this, () => draggedItem = args.Data));
        args.Attributes.Add("ondrop", EventCallback.Factory.Create<DragEventArgs>(this, () =>
        {
            var draggedIndex = marcoList.IndexOf(draggedItem);
            var droppedIndex = marcoList.IndexOf(args.Data);
            marcoList.Remove(draggedItem);
            marcoList.Insert(draggedIndex <= droppedIndex ? droppedIndex++ : droppedIndex, draggedItem);
            this.Category.macroList = marcoList.ToList();
            JSRuntime.InvokeVoidAsync("eval", $"document.querySelector('.my-class').classList.remove('my-class')");
        }));
    }

    public async Task FocusOnRow(int index)
    {
        var orderToFocus = marcoList?[index];

        if (orderToFocus != null)
        {
            await ordersGrid.SelectRow(orderToFocus);
            await JSRuntime.InvokeVoidAsync("scrollToSelectedRow");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.scrollToSelectedRow = function() {
                    var selectedRow = document.querySelector('.rz-state-highlight');
                    if (selectedRow) {
                        selectedRow.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
            ");
        }
    }
}

<style>
    .my-class td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }
</style>