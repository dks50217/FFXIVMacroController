@page "/"
@using System.IO
@using System.Collections.ObjectModel
@using FFXIVMacroController.Grunt
@using FFXIVMacroController.Seer.Events
@using Microsoft.JSInterop
@using System.Text.Json
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject ContextMenuService contextMenuService
@inject DialogService dialogService

<RadzenLayout style="position: relative;grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="5">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            <RadzenAlert Variant="Variant.Filled" AlertStyle="MessageAlertStyle" Size="AlertSize.Small" AllowClose="false">
                @Message
            </RadzenAlert>
@*             <RadzenPanel AllowCollapse="true">
                <ChildContent>
                    <RadzenCard class="rz-mt-4">
                        <RadzenAlert Variant="Variant.Filled" AlertStyle="AlertStyle.Info" AllowClose="false" Text="@CurrentGame?.GamePath"></RadzenAlert>
                        <RadzenAlert Variant="Variant.Filled" AlertStyle="AlertStyle.Info" AllowClose="false" Text="@CurrentGame?.PlayerName"></RadzenAlert>
                    </RadzenCard>
               </ChildContent>
            </RadzenPanel> *@
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" Style="width: max-content">
        <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">
            @if (isLoading)
            {
                <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            }
            else
            {
                <RadzenPanelMenuItem>
                    <Template>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                            <RadzenButton Click=handleAdd Icon="add" ButtonStyle="ButtonStyle.Success" />
                            <RadzenButton Click=handleSave Icon="save" ButtonStyle="ButtonStyle.Success" />
                        </RadzenStack>
                    </Template>
                </RadzenPanelMenuItem>
                
                @foreach (var item in rootModel!.categoryList)
                {
                    <RadzenPanelMenuItem Click="((arg) => PanelMenuClick(item))">
                        <Template>
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Click="@((args) => handleDelete(item))" />
                                @item.name
                            </RadzenStack>
                        </Template>
                    </RadzenPanelMenuItem>
                }
            }
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @if (Category != null)
            {
                <ListComponent @ref="listComponent"
                               Category="Category" 
                               KeyList="keyList" 
                               TypeList="typeList"
                               CallPlay="handlePlay"
                               CallCancel="handleCancel"
                               NameChanged="handleNameChanged"></ListComponent>
            }    
        </div>
    </RadzenBody>
</RadzenLayout>





@code {
    private int CurrentTabIndex { get; set; } = 0;

    private RadzenTabs? tabs;

    private CategoryModel? Category { get; set; }

    private int selectedIndex = 0;

    private ListComponent? listComponent { get; set; }

    private Game? CurrentGame { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitConfigData();
        isLoading = false;
    }

    bool sidebarExpanded = true;
    private int selectedTab { get; set; } = 0;
    private decimal? value = 1;
    private MacroRootModel? rootModel { get; set; }
    private List<OptionModel>? keyList { get; set; }
    private List<OptionModel>? typeList { get; set; }
    private bool isLoading { get; set; } = true;
    private string? newTabName { get; set; } = "New Macro";
    private string? Message { get; set; } = "No Message";
    private AlertStyle MessageAlertStyle { get; set; } = AlertStyle.Info;
    private CancellationTokenSource cancellationTokenSource = null;


    private async Task InitConfigData()
    {
        var json = await File.ReadAllTextAsync("config.json");

        this.rootModel = EventHelper.ConvertJsonToList(json);

        this.keyList = Enum.GetValues(typeof(Keys)).Cast<Keys>().Select(n => new OptionModel
        {
            label = Enum.GetName(n),
            value = (int)n
        })
        .Distinct()
        .ToList();


        this.typeList = Enum.GetValues(typeof(Types)).Cast<Types>().Select(n => new OptionModel
        {
            label = Enum.GetName(n),
            value = (int)n
        })
        .Distinct()
        .ToList();

        await Task.Delay(1000);

        CurrentGame = BmpSeer.Instance.Games.Values.FirstOrDefault();
    }

    protected override void OnParametersSet()
    {
        this.Category = this.rootModel.categoryList.First();
    }

    private void PanelMenuClick(CategoryModel model)
    {
        this.Category = model;
    }

    private async Task handlePlay(CategoryModel model)
    {
        if (!BmpSeer.Instance.Started)
        {
            BmpSeer.Instance.Start();

            BmpGrunt.Instance.Start();

            await Task.Delay(1000);
        }

        var game = BmpSeer.Instance.Games.Values.FirstOrDefault();

        if (game == null)
        {
            return;
        }

        cancellationTokenSource = new CancellationTokenSource();
        CancellationToken cancellationToken = cancellationTokenSource.Token;

        foreach (var item in model.macroList.Select((value, index) => new { index, value }))
        {
            listComponent?.FocusOnRow(item.index);
            await EventHelper.SendInput_Token(game, item.value, cancellationToken);
        }
    }

    private async Task handleCancel(CategoryModel model)
    {
        BmpGrunt.Instance.Stop();

        BmpSeer.Instance.Stop();

        if (cancellationTokenSource != null)
        {
            await cancellationTokenSource.CancelAsync();
            return;
        }

        return;
    }

    private void handleNameChanged(ChangeEventArgs args)
    {
        this.Category.name = args.Value.ToString();
    }

    private async Task handleSave()
    {
        try
        {
            string json = JsonSerializer.Serialize(this.rootModel);
            await File.WriteAllTextAsync(AppDomain.CurrentDomain.BaseDirectory + @"\config.json", json);
            MessageAlertStyle = AlertStyle.Success;
            Message = "儲存成功";
        }
        catch (Exception ex)
        {
            MessageAlertStyle = AlertStyle.Danger;
            Message = ex.Message;
        }
    }

    private void handleAdd()
    {
        var cloneItem = (this.rootModel?.categoryList?.Any() == true)
            ? (this.rootModel.categoryList.Last().Clone() as CategoryModel) ?? new CategoryModel()
            : new CategoryModel
                {
                    id = Guid.NewGuid().ToString(),
                    category = "action",
                    repeat = 1,
                    macroList = new List<MacroModel>()
                };

        cloneItem.name = this.newTabName ?? "default";

        this.rootModel?.categoryList.Add(cloneItem);

        tabs?.Reload();
    }

    private void handleDelete(CategoryModel model)
    {
        this.rootModel?.categoryList.Remove(model);
        this.StateHasChanged();
    }
}

<style scoped>
    .addTab .ui-tabview-left-icon {
        background-color :red;
    }
</style>
